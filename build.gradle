plugins {
    id 'java'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.2.7.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}

apply plugin: "java"
apply plugin: 'idea'

group = 'com.techtask.app'
version = '0.0.1-SNAPSHOT'
description = 'backend-techtask-credit-card-application'

tasks.withType(Tar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Zip) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Copy) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    implementation(
            'org.springframework.boot:spring-boot-starter-web:2.1.3.RELEASE',
            'org.springframework.boot:spring-boot-starter-data-jdbc:2.1.3.RELEASE',
            'org.projectlombok:lombok:1.18.22'

    )
    runtimeOnly(
            'org.springframework.boot:spring-boot-devtools:2.1.3.RELEASE',
            'com.h2database:h2:1.4.197',
            'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    )
    testImplementation(
            'org.springframework.boot:spring-boot-starter-test:2.1.3.RELEASE',
            'org.junit.jupiter:junit-jupiter-api:5.8.1',
            'org.mockito:mockito-junit-jupiter:4.3.1',
            'org.hamcrest:hamcrest-library:2.2',
            'org.mockito:mockito-core:4.3.1',
            'org.mockito:mockito-inline:4.3.1',
            'org.slf4j:slf4j-api:1.7.35',
            'org.slf4j:slf4j-log4j12:1.7.35'
    )
    annotationProcessor(
            'org.projectlombok:lombok:1.18.22'
    )
}


publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.package.YourClass'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


test {
    useJUnitPlatform()
}

